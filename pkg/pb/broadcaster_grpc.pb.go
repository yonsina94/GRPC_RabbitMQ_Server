// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/pb/broadcaster.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BroadcasterService_SendMessage_FullMethodName = "/broadcaster.BroadcasterService/SendMessage"
)

// BroadcasterServiceClient is the client API for BroadcasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcasterServiceClient interface {
	SendMessage(ctx context.Context, in *Payload, opts ...grpc.CallOption) (BroadcasterService_SendMessageClient, error)
}

type broadcasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcasterServiceClient(cc grpc.ClientConnInterface) BroadcasterServiceClient {
	return &broadcasterServiceClient{cc}
}

func (c *broadcasterServiceClient) SendMessage(ctx context.Context, in *Payload, opts ...grpc.CallOption) (BroadcasterService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &BroadcasterService_ServiceDesc.Streams[0], BroadcasterService_SendMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &broadcasterServiceSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BroadcasterService_SendMessageClient interface {
	Recv() (*SendResult, error)
	grpc.ClientStream
}

type broadcasterServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *broadcasterServiceSendMessageClient) Recv() (*SendResult, error) {
	m := new(SendResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcasterServiceServer is the server API for BroadcasterService service.
// All implementations must embed UnimplementedBroadcasterServiceServer
// for forward compatibility
type BroadcasterServiceServer interface {
	SendMessage(*Payload, BroadcasterService_SendMessageServer) error
	mustEmbedUnimplementedBroadcasterServiceServer()
}

// UnimplementedBroadcasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcasterServiceServer struct {
}

func (UnimplementedBroadcasterServiceServer) SendMessage(*Payload, BroadcasterService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedBroadcasterServiceServer) mustEmbedUnimplementedBroadcasterServiceServer() {}

// UnsafeBroadcasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcasterServiceServer will
// result in compilation errors.
type UnsafeBroadcasterServiceServer interface {
	mustEmbedUnimplementedBroadcasterServiceServer()
}

func RegisterBroadcasterServiceServer(s grpc.ServiceRegistrar, srv BroadcasterServiceServer) {
	s.RegisterService(&BroadcasterService_ServiceDesc, srv)
}

func _BroadcasterService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Payload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BroadcasterServiceServer).SendMessage(m, &broadcasterServiceSendMessageServer{stream})
}

type BroadcasterService_SendMessageServer interface {
	Send(*SendResult) error
	grpc.ServerStream
}

type broadcasterServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *broadcasterServiceSendMessageServer) Send(m *SendResult) error {
	return x.ServerStream.SendMsg(m)
}

// BroadcasterService_ServiceDesc is the grpc.ServiceDesc for BroadcasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broadcaster.BroadcasterService",
	HandlerType: (*BroadcasterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _BroadcasterService_SendMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/pb/broadcaster.proto",
}
