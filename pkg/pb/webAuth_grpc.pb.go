// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/pb/webAuth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NftIdHub_StartRegistration_FullMethodName  = "/NftIdHub.NftIdHub/StartRegistration"
	NftIdHub_FinishRegistration_FullMethodName = "/NftIdHub.NftIdHub/FinishRegistration"
)

// NftIdHubClient is the client API for NftIdHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftIdHubClient interface {
	StartRegistration(ctx context.Context, in *StartRegistrationRequest, opts ...grpc.CallOption) (*StartRegistrationResponse, error)
	FinishRegistration(ctx context.Context, in *FinishRegistrationRequest, opts ...grpc.CallOption) (*FinishRegistrationResponse, error)
}

type nftIdHubClient struct {
	cc grpc.ClientConnInterface
}

func NewNftIdHubClient(cc grpc.ClientConnInterface) NftIdHubClient {
	return &nftIdHubClient{cc}
}

func (c *nftIdHubClient) StartRegistration(ctx context.Context, in *StartRegistrationRequest, opts ...grpc.CallOption) (*StartRegistrationResponse, error) {
	out := new(StartRegistrationResponse)
	err := c.cc.Invoke(ctx, NftIdHub_StartRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftIdHubClient) FinishRegistration(ctx context.Context, in *FinishRegistrationRequest, opts ...grpc.CallOption) (*FinishRegistrationResponse, error) {
	out := new(FinishRegistrationResponse)
	err := c.cc.Invoke(ctx, NftIdHub_FinishRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftIdHubServer is the server API for NftIdHub service.
// All implementations must embed UnimplementedNftIdHubServer
// for forward compatibility
type NftIdHubServer interface {
	StartRegistration(context.Context, *StartRegistrationRequest) (*StartRegistrationResponse, error)
	FinishRegistration(context.Context, *FinishRegistrationRequest) (*FinishRegistrationResponse, error)
	mustEmbedUnimplementedNftIdHubServer()
}

// UnimplementedNftIdHubServer must be embedded to have forward compatible implementations.
type UnimplementedNftIdHubServer struct {
}

func (UnimplementedNftIdHubServer) StartRegistration(context.Context, *StartRegistrationRequest) (*StartRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRegistration not implemented")
}
func (UnimplementedNftIdHubServer) FinishRegistration(context.Context, *FinishRegistrationRequest) (*FinishRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRegistration not implemented")
}
func (UnimplementedNftIdHubServer) mustEmbedUnimplementedNftIdHubServer() {}

// UnsafeNftIdHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftIdHubServer will
// result in compilation errors.
type UnsafeNftIdHubServer interface {
	mustEmbedUnimplementedNftIdHubServer()
}

func RegisterNftIdHubServer(s grpc.ServiceRegistrar, srv NftIdHubServer) {
	s.RegisterService(&NftIdHub_ServiceDesc, srv)
}

func _NftIdHub_StartRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftIdHubServer).StartRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftIdHub_StartRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftIdHubServer).StartRegistration(ctx, req.(*StartRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NftIdHub_FinishRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftIdHubServer).FinishRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftIdHub_FinishRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftIdHubServer).FinishRegistration(ctx, req.(*FinishRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NftIdHub_ServiceDesc is the grpc.ServiceDesc for NftIdHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NftIdHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NftIdHub.NftIdHub",
	HandlerType: (*NftIdHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRegistration",
			Handler:    _NftIdHub_StartRegistration_Handler,
		},
		{
			MethodName: "FinishRegistration",
			Handler:    _NftIdHub_FinishRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/webAuth.proto",
}
